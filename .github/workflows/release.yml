name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: 'release-${{ github.ref }}'
  cancel-in-progress: false

jobs:
  security:
    name: Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - uses: github/codeql-action/init@v3.28.0
        with:
          languages: javascript-typescript

      - uses: github/codeql-action/analyze@v3.28.0

      - uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - uses: github/codeql-action/upload-sarif@v3.28.0
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  quality:
    name: Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: security
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4.1.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm ci --prefer-offline --no-audit
      - run: npm run lint
      - run: npm run type-check
      - run: npm run test:ci

      - uses: codecov/codecov-action@v5.1.1
        if: matrix.node-version == 20
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - run: npm run security:audit:prod

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [security, quality]
    permissions:
      contents: write
      actions: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4.1.0
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci --prefer-offline --no-audit

      - name: Get version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Analyzing commits for version detection..."

          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "::notice::No previous tags found - will create initial release"
            echo "version=1.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for conventional commits since last tag
          COMMITS=$(git log "${LAST_TAG}..HEAD" --oneline | grep -E "^[a-f0-9]+ (feat|fix|perf)(\([^)]*\))?(!)?:" || true)

          if [ -z "$COMMITS" ]; then
            echo "::notice::No release-worthy commits found since $LAST_TAG - skipping release"
            echo "version=skip" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Determine version bump type
          if echo "$COMMITS" | grep -qE "(feat|fix|perf)(\([^)]*\))?!:"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -qE "feat(\([^)]*\))?:"; then
            BUMP="minor" 
          else
            BUMP="patch"
          fi

          # Calculate next version
          CURRENT_VERSION=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          case "$BUMP" in
            major) NEXT_VERSION="$((MAJOR + 1)).0.0" ;;
            minor) NEXT_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
            patch) NEXT_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          esac

          echo "::notice::Next release version: $NEXT_VERSION (${BUMP} bump from ${CURRENT_VERSION})"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Build
        if: steps.version.outputs.version != 'skip'
        run: |
          export PUBLIC_URL="/portfolio"
          export NODE_ENV="production"
          export GENERATE_SOURCEMAP="false"
          export INLINE_RUNTIME_CHUNK="false"
          export REACT_APP_VERSION="${{ steps.version.outputs.version }}"
          export REACT_APP_BUILD_TIME="${{ github.run_number }}"
          export REACT_APP_COMMIT_SHA="${{ github.sha }}"
          export REACT_APP_GOOGLE_ANALYTICS_ID="${{ secrets.REACT_APP_GOOGLE_ANALYTICS_ID }}"
          export REACT_APP_EMAILJS_SERVICE_ID="${{ secrets.REACT_APP_EMAILJS_SERVICE_ID }}"
          export REACT_APP_EMAILJS_TEMPLATE_ID="${{ secrets.REACT_APP_EMAILJS_TEMPLATE_ID }}"
          export REACT_APP_EMAILJS_PUBLIC_KEY="${{ secrets.REACT_APP_EMAILJS_PUBLIC_KEY }}"
          npm run build
        timeout-minutes: 15

      - uses: actions/upload-artifact@v4
        if: steps.version.outputs.version != 'skip'
        with:
          name: build-artifacts
          path: build/
          retention-days: 7

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, build]
    if: github.ref == 'refs/heads/main' && needs.build.outputs.version != 'skip'
    timeout-minutes: 10
    permissions:
      contents: write
      actions: read
    outputs:
      released: ${{ steps.semantic.outputs.released }}
      version: ${{ steps.semantic.outputs.version }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: git fetch origin refs/notes/semantic-release*:refs/notes/semantic-release* || true

      - uses: actions/setup-node@v4.1.0
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci --prefer-offline --no-audit

      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Starting semantic release..."

          OUTPUT=$(npx semantic-release --debug 2>&1)
          EXIT_CODE=$?

          echo "::group::Semantic Release Output"
          echo "$OUTPUT"
          echo "::endgroup::"

          if [ $EXIT_CODE -eq 0 ]; then
            if echo "$OUTPUT" | grep -q "Published release"; then
              VERSION=$(echo "$OUTPUT" | grep -oP 'Published release \K[v]?[\d]+\.[\d]+\.[\d]+(?:-[\w\d\.-]*)?(?:\+[\w\d\.-]*)?')
              VERSION=${VERSION#v}  # Remove v prefix if present
              echo "::notice::Release published successfully: $VERSION"
              echo "released=true" >> $GITHUB_OUTPUT
              echo "version=${VERSION:-unknown}" >> $GITHUB_OUTPUT
            else
              echo "::notice::Semantic release completed - no release needed"
              echo "released=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::Semantic release failed with exit code $EXIT_CODE"
            echo "released=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, release]
    if: needs.release.outputs.released == 'true'
    timeout-minutes: 15
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
      actions: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Validate build artifacts
        run: |
          if [ ! -d "build" ] || [ -z "$(ls -A build)" ]; then
            echo "::error::Build artifacts are missing or empty"
            exit 1
          fi
          echo "::notice::Build artifacts validated successfully"
          ls -la build/

      - uses: actions/configure-pages@v5.0.0
      - uses: actions/upload-pages-artifact@v4.0.0
        with:
          path: build/
      - id: deployment
        uses: actions/deploy-pages@v4.0.5

      - name: Summary
        run: |
          echo "## Release Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY

  monitor:
    name: Monitor
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.deploy.result == 'success' && github.ref == 'refs/heads/main'
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4.2.2

      - uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ github.event.repository.homepage || format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) }}
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Performance Summary
        run: |
          echo "## Performance Monitoring Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Lighthouse CI**: Analysis complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Reports**: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
