name: Emergency Hotfix

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Emergency fix description'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests for emergency deployment'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: 'hotfix'
  cancel-in-progress: false

jobs:
  hotfix-deploy:
    name: Emergency Hotfix Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v5.0.0

      - uses: actions/setup-node@v4.1.0
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci --prefer-offline --no-audit

      - name: Emergency validation
        run: |
          echo "::notice::Emergency hotfix initiated"
          echo "::notice::Reason: ${{ inputs.description }}"
          echo "::notice::Skip tests: ${{ inputs.skip_tests }}"
          echo "::notice::Commit: ${{ github.sha }}"

      - name: Quality checks
        run: |
          set -e
          echo "::group::Type Checking"
          npm run type-check
          echo "::endgroup::"

          if [[ "${{ inputs.skip_tests }}" == "true" ]]; then
            echo "::warning::Tests skipped for emergency deployment"
          else
            echo "::group::Running Tests"
            timeout 5m npm run test:ci || {
              echo "::error::Tests failed - emergency deployment requires manual override"
              exit 1
            }
            echo "::endgroup::"
          fi

          echo "::group::Security Audit"
          npm run security:audit:ci
          echo "::endgroup::"

      - name: Build
        run: |
          set -e
          echo "::group::Emergency Build"
          export PUBLIC_URL="/portfolio"
          export NODE_ENV="production"
          export GENERATE_SOURCEMAP="false"
          export REACT_APP_VERSION="hotfix-${{ github.run_number }}"
          export REACT_APP_BUILD_TIME="${{ github.run_number }}"
          export REACT_APP_COMMIT_SHA="${{ github.sha }}"
          export REACT_APP_GOOGLE_ANALYTICS_ID="${{ secrets.REACT_APP_GOOGLE_ANALYTICS_ID }}"
          export REACT_APP_EMAILJS_SERVICE_ID="${{ secrets.REACT_APP_EMAILJS_SERVICE_ID }}"
          export REACT_APP_EMAILJS_TEMPLATE_ID="${{ secrets.REACT_APP_EMAILJS_TEMPLATE_ID }}"
          export REACT_APP_EMAILJS_PUBLIC_KEY="${{ secrets.REACT_APP_EMAILJS_PUBLIC_KEY }}"

          npm run build
          echo "::endgroup::"
        timeout-minutes: 15

      - name: Validate build
        run: |
          if [ ! -d "build" ] || [ -z "$(ls -A build)" ]; then
            echo "::error::Emergency build failed - no artifacts produced"
            exit 1
          fi

          BUILD_SIZE=$(du -sh build | cut -f1)
          echo "::notice::Emergency build size: $BUILD_SIZE"

          # Warn if build is unusually large (>10MB)
          BUILD_SIZE_BYTES=$(du -sb build | cut -f1)
          if [ "$BUILD_SIZE_BYTES" -gt 10485760 ]; then
            echo "::warning::Emergency build is large ($BUILD_SIZE) - review before production"
          fi

      - uses: actions/configure-pages@v5.0.0
      - uses: actions/upload-pages-artifact@v4.0.0
        with:
          path: build/
      - id: deployment
        uses: actions/deploy-pages@v4.0.5

      - name: Summary
        run: |
          echo "## Emergency Hotfix Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Reason**: ${{ inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: hotfix-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "::warning::Follow up with proper semantic release"
