name: Deploy

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'deploy-${{ github.ref }}'
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4.2.2

      - uses: actions/setup-node@v4.1.0
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci --prefer-offline --no-audit

      - name: Deploy validation
        run: |
          echo "::notice::Manual deployment initiated"
          echo "::notice::Trigger: ${{ github.event_name }}"
          echo "::notice::Force deploy: ${{ inputs.force_deploy || 'false' }}"
          echo "::notice::Branch: ${{ github.ref }}"

      - name: Quality checks
        run: |
          set -e
          echo "::group::Linting"
          npm run lint
          echo "::endgroup::"

          echo "::group::Type Checking"
          npm run type-check
          echo "::endgroup::"

          echo "::group::Testing"
          npm run test:ci
          echo "::endgroup::"

          echo "::group::Security Audit"
          npm run security:audit:prod
          echo "::endgroup::"

      - name: Build
        run: |
          set -e
          echo "::group::Production Build"
          export PUBLIC_URL="/portfolio"
          export NODE_ENV="production"
          export GENERATE_SOURCEMAP="false"
          export INLINE_RUNTIME_CHUNK="false"
          export REACT_APP_VERSION="deploy-${{ github.run_number }}"
          export REACT_APP_BUILD_TIME="${{ github.run_number }}"
          export REACT_APP_COMMIT_SHA="${{ github.sha }}"
          export REACT_APP_GOOGLE_ANALYTICS_ID="${{ secrets.REACT_APP_GOOGLE_ANALYTICS_ID }}"
          export REACT_APP_EMAILJS_SERVICE_ID="${{ secrets.REACT_APP_EMAILJS_SERVICE_ID }}"
          export REACT_APP_EMAILJS_TEMPLATE_ID="${{ secrets.REACT_APP_EMAILJS_TEMPLATE_ID }}"
          export REACT_APP_EMAILJS_PUBLIC_KEY="${{ secrets.REACT_APP_EMAILJS_PUBLIC_KEY }}"

          npm run build
          echo "::endgroup::"
        timeout-minutes: 15

      - name: Validate build
        run: |
          if [ ! -d "build" ] || [ -z "$(ls -A build)" ]; then
            echo "::error::Build failed - no artifacts produced"
            exit 1
          fi

          BUILD_SIZE=$(du -sh build | cut -f1)
          echo "::notice::Build size: $BUILD_SIZE"

          # Check for essential files
          if [ ! -f "build/index.html" ]; then
            echo "::error::Build missing index.html"
            exit 1
          fi

          echo "::notice::Build validation successful"

      - uses: actions/configure-pages@v5.0.0
      - uses: actions/upload-pages-artifact@v4.0.0
        with:
          path: build/
      - id: deployment
        uses: actions/deploy-pages@v4.0.5

      - name: Performance audit
        uses: treosh/lighthouse-ci-action@v12
        continue-on-error: true
        with:
          urls: |
            ${{ steps.deployment.outputs.page_url }}
          configPath: './.lighthouserc.json'
          uploadArtifacts: true

      - name: Summary
        run: |
          echo "## Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          BUILD_SIZE=$(du -sh build | cut -f1)
          echo "- **Size**: $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
